type Query {
    getProducts (
        type: String @doc(description: "Type will define like recently viewed or any custom type."),
        updated_from: String @doc(description: "Timestamp indicating when the product was updated."),
        updated_to: String @doc(description: "Timestamp indicating when the product was updated."),
        sel_updated_from: String @doc(description: "Timestamp indicating when the product defined attributes was updated."),
        sel_updated_to: String @doc(description: "Timestamp indicating when the product defined attributes was updated."),
        sku: FilterTypeInput @doc(description: "A number or code assigned to a product to identify the product, options, price, and manufacturer.")
        service_category: FilterTypeInput @doc(description: "Service category of Product like LOCAL, REGIONAL, NATIONAL.")
        is_published: FilterEqualTypeInput @doc(description: "Indicates whether the product is published or not.")
        allowed_channels: FilterTypeInput @doc(description: "Product Allowed Channels.")
        video_url: String @doc(description: "Product Video URL.")
        video_position: String @doc(description: "Product Video display position.")
        video_thumbnail: String @doc(description: "Product Video Thumbnail.")
        ibo_category_id: Int @doc(description: "IBO Category ID.")
        id: Int @doc(description: "Banner Id."),
        pageSize: Int = 5 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1.")
    ): CustomProducts
    @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\Products") @doc(description: "The products query searches for products that match the criteria specified in the type argument")
    products (
        excludeAttr: ExcludeAttributeInput @doc(description: "Exclude Attribute to not be included inside more information"),
        search: String @doc(description: "Performs a full-text search using the specified key words."),
        filter: ProductAttributeFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
        sort: ProductAttributeSortInput @doc(description: "Specifies which attributes to sort on, and whether to return the results in ascending or descending order.")
        customer_group_id: String @doc(description: "Customer group id like B2B, B2C, B2P etc .")
    ): Products
    @resolver(class: "Magento\\CatalogGraphQl\\Model\\Resolver\\Products") @doc(description: "The products query searches for products that match the criteria specified in the search and filter attributes.") @cache(cacheIdentity: "Magento\\CatalogGraphQl\\Model\\Resolver\\Product\\Identity")
    category (
        id: Int @doc(description: "Id of the category.")
        category_code: String @doc(description: "Category by the ibo category ID")
    ): CategoryTree
   @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\CategoryTree") @doc(description: "The category query searches for categories that match the criteria specified in the search and filter attributes.") @deprecated(reason: "Use 'categoryList' query instead of 'category' query") @cache(cacheIdentity: "Magento\\CatalogGraphQl\\Model\\Resolver\\Category\\CategoryTreeIdentity")
   getHomeCategories (
        type: String @doc(description: "Type will define like top_categories or top_brands."),
        display_zone: FilterTypeInput @doc(description: "Display Zone of category like LOCAL, REGIONAL, NATIONAL.")
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional.")
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1.")
        customer_group_id: String @doc(description: "Customer group id like B2B, B2C, B2P etc .")
    ): CategoryResult @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\CategoriesQuery") @cache(cacheIdentity: "Magento\\CatalogGraphQl\\Model\\Resolver\\Category\\CategoriesIdentity")
}

type Mutation {
	addToRecentViewed(id: Int!): Boolean @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\RecentlyViewedResolver") @doc(description: "Add product to recently viewed")
}

input ProductAttributeFilterInput {
    esin: FilterEqualTypeInput @doc(description:"ESIN number of product")
    allowed_channels: FilterTypeInput @doc(description: "Product Allowed Channels.")
    service_category: FilterTypeInput @doc(description: "Service category of Product like LOCAL, REGIONAL, NATIONAL.")
    category_code: FilterEqualTypeInput @doc(description: "Filter product by the ibo category ID")
    is_published: FilterEqualTypeInput @doc(description: "Indicates whether the product is published or not.")
    video_url: String @doc(description: "Product Video Url.")
    video_position: String @doc(description: "Product Video position.")
    video_thumbnail: String @doc(description: "Product Video Thumbnail.")
}

type CustomProducts @doc(description: "The Products object is the top-level object returned in a product search.") {
    items: [ProductInterface] @doc(description: "An array of products that match the specified search criteria.")
    page_info: SearchResultPageInfo @doc(description: "An object that includes the page_info and currentPage values specified in the query.")
    total_count: Int @doc(description: "The number of products that are marked as visible. By default, in complex products, parent products are visible, but their child products are not.")
}

interface ProductInterface {
 more_info : [AttributeValueandLabel] @doc(description: "Product additional attributes") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\MoreInfoResolver")
 product_url: String @doc(description: "Product Url") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\ProductUrlResolver")
 promises_block: [promisesData] @doc (description: "Promises block data") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\PromisesResolver")
 in_wishlist: Boolean @doc(description: "Indicates whether the product in wishlist or not.") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\InWishlistResolver")
 eligible_promotions: [eligiblePromotionsResultItems] @doc (description: "An array containing list of promotions.") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\EligiblePromotionsResolver")
 ebo_price_range: EboPriceRange! @doc(description: "A PriceRange object, indicating the range of prices for the product") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\Product\\EboPriceRange")
 ebo_price_tiers: EboTierPrice @doc(description: "An array of TierPrice objects.") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\EboPriceTiers")
 media_gallery: [MediaGalleryInterface] @doc(description: "An array of Media Gallery objects sort by position.") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\Product\\MediaGallery")
 subclass_id: String @doc(description: "Product Subclass ID") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\ProductSubclassIdResolver")
 courier_flag: Boolean @doc(description: "Indicates whether the product will courier or not.") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\CourierFlagResolver")
 video_url: String @doc(description: "Shows product video url") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\VideoUrlResolver")
 video_position: String @doc(description: "Shows product video url") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\VideoPositionResolver")
 video_thumbnail: String @doc(description: "Shows product video thumbnail") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\VideoThumbnailResolver")
 pdf_detail: [pdfDetail] @doc(description: "Shows Product PDF Detail") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\PdfDetailResolver")
 short_description: ComplexTextValue @doc(description: "A short description of the product. Its use depends on the theme.") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\Product\\ShortDescriptionResolver")
 product_availability: String @doc(description: "Display product availability status") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\ProductAvailabilityResolver")
 ibo_media_gallery: [MediaGalleryCustomData] @doc(description: "An array of Media Gallery objects.") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\Product\\MediaGalleryCustom")
 image_custom: ProductImageCustom @doc(description: "The relative path to the main image on the product page.") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\Product\\ProductImageCustom")
}

type MediaGalleryCustomData @doc(description: "Contains basic information about a product image.") {
    url: String @doc(description: "The URL of the product image or video.")
    label: String @doc(description: "The label of the product image or video.")
}

type ProductImageCustom @doc(description: "Product image information. Contains the image URL and label.") {
    url: String @doc(description: "The URL of the product image or video.")
    label: String @doc(description: "The label of the product image or video.")
}

type EboTierPrice @doc(description: "A price based on the quantity purchased.") {
    price_with_tax: [TierPrice] @doc(description: "The lowest possible price for the product.")
    price_without_tax: [TierPrice] @doc(description: "The highest possible price for the product.")
}

type EboPriceRange @doc(description: "Price range for a product. If the product has a single price, the minimum and maximum price will be the same."){
    price_with_tax: PriceRange @doc(description: "The lowest possible price for the product.")
    price_without_tax: PriceRange @doc(description: "The highest possible price for the product.")
}

type ProductPrice @doc(description: "Represents a product price.") {
    unit_price: String @doc(description: "The unit price of the product eg: price per sq feet .")
}

type TierPrice @doc(description: "A price based on the quantity purchased.") {
    unit_price: String @doc(description: "The unit price of the product eg: price per sq feet .")
    max_quantity: Float @doc(description: "The minimum number of items that must be purchased to qualify for this price tier.")
}


input ExcludeAttributeInput {
    code: FilterEqualTypeInput @doc(description: "Attribute Code")
}

type promisesData {
    title: String @doc(description: "Promises Title")
    content: String @doc(description: "Promises Content")
    image_url: String @doc(description: "Image Url")
}

type AttributeValueandLabel {
	label: String @doc(description: "Attribute Label")
	value: String @doc(description: "Attribute Value")
	code: String @doc(description: "Attribute Code")
}
type eligiblePromotionsResultItems @doc(description: "Information related to promotions") {
    id: String @doc(description: "Identifier of the promotion")
    name: String @doc(description: "Name of the promotion")
    desc: String @doc(description: "Description of the promotion")
    terms_cond: String @doc(description: "Terms of the promotion")
    sort_order: String @doc(description: "Order to list the promotion")
}

input CategoryFilterInput  @doc(description: "CategoryFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for.")
{
    is_shopby: FilterEqualTypeInput @doc(description: "Filter by the home page categories enabled")
    is_shopby_brand: FilterEqualTypeInput @doc(description: "Filter by the home page brand enabled")
    category_code: String @doc(description: "IBO category ID") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\CategoryIboIdResolver")
    service_category: FilterTypeInput @doc(description: "Service category of Product like LOCAL, REGIONAL, NATIONAL.")
}

type SortField {
    value: String @doc(description: "Attribute code of sort field.")
    label: String @doc(description: "Label of sort field.")
    sort_direction: String @doc(description: "Product List Sort Direction.")
}

input ProductAttributeSortInput @doc(description: "ProductAttributeSortInput specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. It's possible to sort products using searchable attributes with enabled 'Use in Filter Options' option")
{
    sort_order: SortEnum @doc(description: "Sort by the ranking score (default).")
}

type CategoryTree implements CategoryInterface @doc(description: "Category Tree implementation.") {
   children: [CategoryTree] @doc(description: "Child categories tree.") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\CategoryTree")
}

type Breadcrumb @doc(description: "Breadcrumb item.") {
    category_id: Int @deprecated(reason: "Use the `category_uid` argument instead.") @doc(description: "Category ID.")
    category_uid: ID! @doc(description: "The unique ID for a `Breadcrumb` object.")
    category_name: String @doc(description: "Category name.")
    category_level: Int @doc(description: "Category level.")
    category_url_key: String @doc(description: "Category URL key.")
    category_url_path: String @doc(description: "Category URL path.")
    category_code: String @doc(description: "IBO category ID") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\CategoryIboIdBreadcrumbResolver")
}

type pdfDetail @doc(description: "Information related to product's PDF") {
    pdf_path: String @doc(description: "Product PDF path")
    pdf_label: String @doc(description: "Product PDF Label")
}

interface CategoryInterface @typeResolver(class: "Magento\\CatalogGraphQl\\Model\\CategoryInterfaceTypeResolver") @doc(description: "CategoryInterface contains the full set of attributes that can be returned in a category search.") {
    category_code: String @doc(description: "IBO category ID") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\CategoryIboIdResolver")
    navigation_banner: [navigationBanner] @doc(description: "Shows Category Navigation Banner Detail") @resolver(class: "Embitel\\CatalogGraphQl\\Model\\Resolver\\NavigationBannerResolver")
}

type navigationBanner @doc(description: "Category's navigation banner detail") {
    primary_banner_image: String @doc(description: "Category navigation primary banner image")
    primary_banner_title: String @doc(description: "Category navigation primary banner title")
    primary_banner_link_category_id: String @doc(description: "Navigation primary banner redirect cat id")
    secondary_banner_image: String @doc(description: "Category navigation secondary banner image")
    secondary_banner_title: String @doc(description: "Category navigation secondary banner title")
    secondary_banner_link_category_id: String @doc(description: "Category navigation secondary banner redirect cat id")
}
